[build-system]
requires = ["setuptools>=61.0", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["dqn_tutorial"]

[project]
name = "dqn_tutorial"
# version = "0.0.1", version is determined by setuptools_scm
dynamic = ["version"]
authors = [{ name = "Antonin Raffin", email = "antonin.raffin@dlr.de" }]
description = "A small example package"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
]
dependencies = [
    "numpy",
    "gymnasium[classic-control,other]>=0.29.1,<1.1.0",
    "scikit-learn",
    "torch>=2.4.0",
]

[tool.setuptools_scm]
write_to = "dqn_tutorial/_version.py"

[project.optional-dependencies]
tests = [
    # Run tests and coverage
    "pytest",
    "pytest-cov",
    # Type check
    "mypy",
    # Lint code and format
    "ruff",
    # Reformat
    "black",
]

[project.urls]
"Homepage" = "https://github.com/araffin/rlss23-dqn"
"Bug Tracker" = "https://github.com/araffin/rlss23-dqn/issues"

[tool.ruff]
# Same as Black.
line-length = 127
# Assume Python 3.8
target-version = "py38"

[tool.ruff.lint]
# See https://beta.ruff.rs/docs/rules/
select = ["E", "F", "B", "UP", "C90", "RUF"]
# Ignore explicit stacklevel`
ignore = ["B028"]

[tool.lint.ruff.per-file-ignores]


[tool.lint.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 15

[tool.black]
line-length = 127


[tool.mypy]
ignore_missing_imports = true
follow_imports = "silent"
show_error_codes = true
# exclude = """(?x)(
#     stable_baselines3/common/buffers.py$
#   )"""
# plugins = ["numpy.typing.mypy_plugin"]
# disable_error_code = "assignment"

[tool.pytest.ini_options]
# Deterministic ordering for tests; useful for pytest-xdist.
# env = ["PYTHONHASHSEED=0"]

filterwarnings = []
markers = [
    "expensive: marks tests as expensive (deselect with '-m \"not expensive\"')",
]

[tool.coverage.run]
disable_warnings = ["couldnt-parse"]
branch = false
omit = ["tests/*", "dqn_tutorial/_version.py"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError()",
    "if typing.TYPE_CHECKING:",
]
